## A main program for impact analysis of individual comfort model on HVAC control
## 2021-03-12 E.Ono

#####################################
# Load libraries
#####################################
# load the packages
library(eplusr)
#library(epluspar)
source( "/Users/eikichiono/Documents/07_Program_codes/R/Hybrid_system_optimization/set_calc_cbe.R" )

# install here package if not exists
if (!require("here", quietly = TRUE)) install.packages("here")

# turn off verbose information of eplusr package
eplusr_option(verbose_info = FALSE)

eplusr_option(autocomplete = TRUE)

# see what EnergyPlus has been installed
avail_eplus()

# use the example file from latest EnergyPlus installed
ver <- max(avail_eplus())

# parse IDD
#idd <- use_idd(ver, download = "auto")

path_epw <- "/Users/eikichiono/Documents/07_Program_codes/Weather/SGP_Singapore.486980_IWEC.epw"
path_idf <- here::here("sde4_rev4_V920_seminar_opt_1hour_annual_min0.5_rev.idf")

##################################
# Calculate occupancy schedules based on the output from Occupancy Simulator
##################################

Nocc <- 16

path_occ <- "/Users/eikichiono/Documents/02_Research/MBDC/Impact_analysis_of_individual_comfort_model/output_29887087/output_byOccupant.csv"
occ0 <- read.csv(path_occ, skip=6, header=T)

## convert timestep from 10 min to 1 hour
occ <- matrix(numeric((Nocc+1)*8760),nrow=8760,ncol=(Nocc+1))
ave_period <- 6
for (i in 1:8760){
  occ_count <- 0
  for (j in 1:Nocc){
    tmp <- occ0[((i-1)*ave_period+1):(i*ave_period),j+2]
    tmp[tmp!=1] <- 0 # occ=1 means that the occupant is in his office
    if (mean(tmp) >= 0.5){
      occ[i,j] <- 1
      occ_count <- occ_count + 1
    }
  }
  occ[i,Nocc+1] <- occ_count
}

occ_pattern <- c()
for (i in 1:365){
  tmp <- occ[((i-1)*24+1):(i*24),Nocc+1]
  if (sum(tmp) > 0){
    occ_pattern <- rbind(occ_pattern,tmp)
  }
}

write.csv(as.matrix(occ),"occ_occupant.csv")

# png("boxplot_occupancy.png", width = 600, height = 400)
# boxplot(occ_pattern)
# dev.off()  

#####################################
# Internal gains
#####################################

# load ASHRAE schedules
path_sch <- "/Users/eikichiono/Documents/07_Program_codes/Schedule/ASHRAEschedule_office_Singapore2019.csv"
sch_ashrae <- read.csv(path_sch,header=T)

# {wasteful,normal,austerity}
sch_light <- cbind(sch_ashrae[,2],sch_ashrae[,2],sch_ashrae[,2]) 
sch_plug <- cbind(sch_ashrae[,3],sch_ashrae[,3],sch_ashrae[,3])
colnames(sch_light) <- c("light_wasteful","light_normal","light_austerity")
colnames(sch_plug) <- c("plug_wasteful","plug_normal","plug_austerity")

for (i in 1:8760){
  hour <- i%%24
  if (hour >= 8 && hour <= 19 && sch_light[i,1] > 0.1){
    sch_plug[i,1] <- 1
    occ_ratio <- occ[i,Nocc+1]/Nocc
    sch_plug[i,3] <- sch_plug[i,3]*0.7 + sch_plug[i,3]*0.3*occ_ratio
    
    if (sch_plug[i,3] < 0.4){
      sch_plug[i,3] <- 0.4
    }
  }
  if (occ[i,Nocc+1] == 0){
    sch_light[i,2] <- 0.05
    sch_light[i,3] <- 0.05
  }
}

schedules <- cbind(occ[,Nocc+1]/100,sch_light,sch_plug)
colnames(schedules)[1] <- "occupancy"
write.csv(schedules,"casestudy_schedules.csv")

#####################################
# Run simulations
#####################################

floor_area <- 53.6961 # floor area of seminar room from E+

ob_style <- c("wasteful","normal","austerity")
for (i in 1:3){
  for (tsp in seq(25, 27, by = 0.5)){
    for (oct in 17:tsp-2){
      
      idf <- read_idf(path = path_idf, idd = NULL)
      
      # Update schedules
      tmp <- idf$"Schedule:File"[["lighting_schedule_file"]]
      dt <- data.table::rbindlist(c(list(tmp$to_table()), lapply(tmp$ref_to_object(), function (x) x$to_table())))
      dt[4,6] <- i + 2
      idf$update(dt)
      
      tmp <- idf$"Schedule:File"[["plug_schedule_file"]]
      dt <- data.table::rbindlist(c(list(tmp$to_table()), lapply(tmp$ref_to_object(), function (x) x$to_table())))
      dt[4,6] <- i + 5
      idf$update(dt)
      
      # Update cooling setpoint
      tmp <- idf$"Schedule:Compact"[["SDE4_cooling_seminar"]]
      dt <- data.table::rbindlist(c(list(tmp$to_table()), lapply(tmp$ref_to_object(), function (x) x$to_table())))
      dt[6,6] <- tsp
      idf$update(dt)
      
      # Update off-coil temperature setpoint
      tmp <- idf$"Schedule:Compact"[["SDE4OCT_seminar"]]
      dt <- data.table::rbindlist(c(list(tmp$to_table()), lapply(tmp$ref_to_object(), function (x) x$to_table())))
      dt[6,6] <- oct
      idf$update(dt)
      
      idf$save(overwrite = TRUE)
      
      job <- idf$run(path_epw, wait = TRUE)
      job <- idf$last_job()
      stopifnot(!is.null(job))
      
      key_values <- job$report_data_dict()$key_value
      names <- job$report_data_dict()$name
      N <- length(names)
      
      A <- c()
      for (j in 1:N){
        x <- job$report_data(key_values[j],names[j])
        if (j == 2 || j == 5){
          tmp <- (x$value)/floor_area # W -> W/m2
        }else if (j == 3 || j == 4){
          tmp <- (x$value)/3600/floor_area/10.76 # J -> fraction
        }else if (j == 11 || j == 12){
          tmp <- (x$value)/1000 # W -> kW
        }else if (j == 16){
          tmp <- (x$value)*3600 # m3/s -> m3/h
        }else{
          tmp <- x$value
        }
        A <- cbind(A,tmp)
      }
      
      colnames(A)=names
      tsp_str <- sprintf(tsp,fmt = "%0.1f")
      oct_str <- sprintf(oct,fmt = "%0.1f")
      fname <- paste0(ob_style[i],"_tsp",tsp_str,"_oct",oct_str,".csv")
      
      write.csv(as.matrix(A),fname)
    }
    
  }
  
}

#####################################
# Stochastic optimization
#####################################

library(ggplot2)
library(gridExtra)

path_experiment <- "/Users/eikichiono/Documents/02_Research/Mihara-san PhD experiment/inputs_for_python_clo0.4.csv"
data <- read.csv(path_experiment, skip=0, header=T)

Nsub <- 26
tc_scale <- c(-2, -1, -0.1, 0.1, 1, 2)
tc_limit <- 1
ind_tc_limit <- which.min(abs(tc_scale - tc_limit))

tc_table <- array(numeric(Nsub*40*6),dim=c(Nsub,40,6))
satisfied_prob <- matrix(numeric(Nsub*40),nrow=Nsub,ncol=40)
  
layout <- rbind(1:6, 7:12, 13:18, 19:24, 25:30)
str <- "p1"
for (i in 1:Nsub){
  tmp <- data[data[,1]==i,]
  Ndata <- nrow(tmp)
  for (j in 1:Ndata){
    ind_set <- round(tmp[j,11])
    ind_tc <- which.min(abs(tc_scale - tmp[j,14]))
    tc_table[i,ind_set,ind_tc] <- tc_table[i,ind_set,ind_tc] + 1
  }
  
  ## plot number of votes
  # tmp2 <- c()
  # for (j in 16:32){
  #   tmp2 <- rbind(tmp2,cbind(rep(j,6),tc_scale,tc_table[i,j,]))
  # }
  # tmp3 <- data.frame(tmp2)
  # colnames(tmp3) <- c("set","tc","Ntc")
  # 
  # p <- ggplot(data=tmp3 , aes(x= set ,y= tc, size= Ntc)) + geom_point(color="darkgray") + theme(legend.position = 'none')
  
  ind_min <- 40
  ind_max <- 0
  for (j in 16:32){
    tmp4 <- tc_table[i,j,]
    if (sum(tmp4) > 0){
      satisfied_prob[i,j] <- sum(tmp4[ind_tc_limit:6])/sum(tmp4)
      if (i < ind_min){
        ind_min <- i
      }
      if (i > ind_max){
        ind_max <- i
      }
    }
  }
  
  
  
  
  
  eval(parse(text = paste0("p",as.character(i)," <- p")))
  if (i != 1){
    str <- paste0(str,",p",as.character(i))
  }
}
#eval(parse(text = paste0("p_all <- gridExtra::grid.arrange(",str,",layout_matrix=layout)")))
#ggplot2::ggsave('number of votes.png',p_all, width=40, height=25, units = "cm", dpi=400)























